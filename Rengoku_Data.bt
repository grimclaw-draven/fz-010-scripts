//------------------------------------------------
//--- 010 Editor v10.0.1 Binary Template
//
//      File: Rengoku_Data.bt
//   Authors: Fist
//   Version: 1
//   Purpose: Parse rengoku
//  Category: Road
//   History: 29/03/2020 : Initial Release
//------------------------------------------------
typedef enum <uint32> { 
	None,
	Rathian,
	Fatalis,
	Kelbi,
	Mosswine,
	Bullfango,
	Yian_Kut_Ku,
	Lao_Shan_Lung,
	Cephadrome,
	Felyne_1,
	Veggie_Elder,
	Rathalos,
	Aptonoth,
	Genprey,
	Diablos,
	Khezu,
	Velociprey,
	Gravios,
	Felyne_2,
	Vespoid,
	Gypceros,
	Plesioth,
	Basarios,
	Melynx,
	Hornetaur,
	Apceros,
	Monoblos,
	Velocidrome,
	Gendrome,
	Rocks_0,
	Ioprey,
	Iodrome,
	Pugis,
	Kirin,
	Cephalos,
	Giaprey,
	Crimson_Fatalis,
	Pink_Rathian,
	Blue_Yian_Kut_Ku,
	Purple_Gypceros,
	Yian_Garuga,
	Silver_Rathalos,
	Gold_Rathian,
	Black_Diablos,
	White_Monoblos,
	Red_Khezu,
	Green_Plesioth,
	Black_Gravios,
	Daimyo_Hermitaur,
	Azure_Rathalos,
	Ashen_Lao_Shan_Lung,
	Blangonga,
	Congalala,
	Rajang,
	Kushala_Daora,
	Shen_Gaoren,
	Great_Thunderbug,
	Shakalaka,
	Yama_Tsukami_1,
	Chameleos,
	Rusted_Kushala_Daora,
	Blango,
	Conga,
	Remobra,
	Lunastra,
	Teostra,
	Hermitaur,
	Shogun_Ceanataur,
	Bulldrome,
	Anteka,
	Popo,
	White_Fatalis,
	Yama_Tsukami_2,
	Ceanataur,
	Hypnocatrice,
	Lavasioth,
	Tigrex,
	Akantor,
	Bright_Hypnoc,
	Lavasioth_Subspecies,
	Espinas,
	Orange_Espinas,
	White_Hypnoc,
	Akura_Vashimu,
	Akura_Jebia,
	Berukyurosu,
	Cactus_01,
	Gorge_Objects,
	Gorge_Rocks,
	Pariapuria,
	White_Espinas,
	Kamu_Orugaron,
	Nono_Orugaron,
	Raviente,
	Dyuragaua,
	Doragyurosu,
	Gurenzeburu,
	Burukku,
	Erupe,
	Rukodiora,
	Unknown,
	Gogomoa,
	Kokomoa,
	Taikun_Zamuza,
	Abiorugu,
	Kuarusepusu,
	Odibatorasu,
	Disufiroa,
	Rebidiora,
	Anorupatisu,
	Hyujikiki,
	Midogaron,
	Giaorugu,
	Mi_Ru,
	Farunokku,
	Pokaradon,
	Shantien,
	Pokara,
	Dummy,
	Goruganosu,
	Aruganosu,
	Baruragaru,
	Zerureusu,
	Gougarf,
	Uruki,
	Forokururu,
	Meraginasu,
	Diorekkusu,
	Garuba_Daora,
	Inagami,
	Varusaburosu,
	Poborubarumu,
	Duremudira,
	UNK_0,
	Felyne,
	Blue_NPC,
	UNK_1,
	Cactus_Varusa,
	Veggie_Elders,
	Gureadomosu,
	Harudomerugu,
	Toridcless,
	Gasurabazura,
	Kusubami,
	Yama_Kurai,
	Dure_2nd_District,
	Zinogre,
	Deviljho,
	Brachydios,
	Berserk_Laviente,
	Toa_Tesukatora,
	Barioth,
	Uragaan,
	Stygian_Zinogre,
	Guanzorumu,
	Starving_Deviljho,
	UNK,
	Egyurasu,
	Voljang,
	Nargacuga,
	Keoaruboru,
	Zenaserisu,
	Gore_Magala,
	Blinking_Nargacuga,
	Shagaru_Magala,
	Amatsu,
	Elzelion,
	Musou_Dure,
	Rocks_1,
	Seregios,
	Bogabadorumu,
	Unknown_Blue_Barrel,
	Musou_Bogabadorumu,
	Costumed_Uruki,
	Musou_Zerureusu,
	PSO2_Rappy,
	King_Shakalaka
} MonsterID;

typedef struct{
uint32 FloorStatsCount;
uint32 SpawnCountCount;
uint32 SpawnTablePointersCount;
uint32 FloorStatsPointer;
uint32 SpawnTablePointers;
uint32 SpawnCountPointers;
}RoadMode;
    
typedef struct{
MonsterID FirstMonsterID;
uint32 FirstMonsterVariant;
MonsterID SecondMonsterID;
uint32 SecondMonsterVariant;
uint32 MonstersStatTable;
uint32 MapZoneOverride;
uint32 SpawnWeighting;
uint32 AdditionalFlag;
}SpawnTable;

typedef struct{
uint32 FloorNumber;
uint32 SpawnTableUsed;
uint32 Unk0;
float PointMulti1;
float PointMulti2;
uint32 FinalLoop;
}FloorStats;

LittleEndian();


FSeek(0x14);
SetBackColor( 0xFFFF00FF );
RoadMode multiDef;
SetBackColor( 0xFFFFBBFF );
RoadMode soloDef;

SetBackColor( 0xFFFF0000 );

struct{
local int i;
struct{
    for(i = 0; i < multiDef.SpawnTablePointersCount; i++){
        struct{
        FSeek(multiDef.SpawnTablePointers + (i*4));
        uint32 tablePointer;
        FSeek(multiDef.SpawnCountPointers + (i*4));
        uint32 entryCount;
        local int x;
            struct{
                FSeek(tablePointer);
                for(x = 0; x < entryCount; x++){
                    SpawnTable spawn;
                } 
            }spawns;
        
        }TableEntry;
        FSeek(multiDef.SpawnTablePointers);
    }
} spawnTables;

SetBackColor( 0xFFAA0000 );

FSeek(multiDef.FloorStatsPointer);
struct{
for(i = 0; i < multiDef.FloorStatsCount; i++){
    FloorStats floorStats;
}
} statTables;
}multiRoad;

SetBackColor( 0xFF0000FF );
FSeek(0);
struct{
local int i;
struct{
    for(i = 0; i < soloDef.SpawnTablePointersCount; i++){
        struct{
        FSeek(soloDef.SpawnTablePointers + (i*4));
        uint32 tablePointer;
        FSeek(soloDef.SpawnCountPointers + (i*4));
        uint32 entryCount;
        local int x;
            struct{
                FSeek(tablePointer);
                for(x = 0; x < entryCount; x++){
                    SpawnTable spawn;
                } 
            }spawns;
        
        }TableEntry;
        FSeek(soloDef.SpawnTablePointers);
    }
} spawnTables;

SetBackColor( 0xFF0033AA );
FSeek(soloDef.FloorStatsPointer);
struct{
for(i = 0; i < soloDef.FloorStatsCount; i++){
    FloorStats floorStats;
}
} statTables;
}soloRoad;
