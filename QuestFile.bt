//------------------------------------------------
//--- 010 Editor v2.0 Binary Template
//
//      File: MHFQuests.bt
//    Author: Fist
//   Version: 2.3
//   Purpose: Parse MHF quest files.
//  Category: Quest
// File Mask: *.bin
//  ID Bytes: C0 00 00 00 
//   History: 
//------------------------------------------------

typedef struct {
    SetBackColor( 0xFF00CCFF );
    unsigned long  questTypeFlagsPtr;
    unsigned long  loadedStagesPtr;
    unsigned long  supplyBoxPtr;
    unsigned long  rewardPtr;
    unsigned short  subSupplyBoxPtr;
    unsigned byte  unk0;  
    unsigned byte  subSupplyBoxLen;
    unsigned long  questAreaPtr;
    unsigned long  largeMonsterPtr;
    unsigned long  areaFloats;
    unsigned long  unkFloats1;
    unsigned long  unkPtr3;
    unsigned long  unkPtr4;
    unsigned long  unkPtr5;
    unsigned long  unkPtr6;
    unsigned long  unkPtr7;
    unsigned long  gatheringPointers;
    unsigned long  unkPtr8;
    unsigned long  unkPtr9;
} QuestFileHeader;


typedef enum <ubyte> { 
	None,
	Rathian,
	Fatalis,
	Kelbi,
	Mosswine,
	Bullfango,
	Yian_Kut_Ku,
	Lao_Shan_Lung,
	Cephadrome,
	Felyne_1,
	Veggie_Elder,
	Rathalos,
	Aptonoth,
	Genprey,
	Diablos,
	Khezu,
	Velociprey,
	Gravios,
	Felyne_2,
	Vespoid,
	Gypceros,
	Plesioth,
	Basarios,
	Melynx,
	Hornetaur,
	Apceros,
	Monoblos,
	Velocidrome,
	Gendrome,
	Rocks_0,
	Ioprey,
	Iodrome,
	Pugis,
	Kirin,
	Cephalos,
	Giaprey,
	Crimson_Fatalis,
	Pink_Rathian,
	Blue_Yian_Kut_Ku,
	Purple_Gypceros,
	Yian_Garuga,
	Silver_Rathalos,
	Gold_Rathian,
	Black_Diablos,
	White_Monoblos,
	Red_Khezu,
	Green_Plesioth,
	Black_Gravios,
	Daimyo_Hermitaur,
	Azure_Rathalos,
	Ashen_Lao_Shan_Lung,
	Blangonga,
	Congalala,
	Rajang,
	Kushala_Daora,
	Shen_Gaoren,
	Great_Thunderbug,
	Shakalaka,
	Yama_Tsukami_1,
	Chameleos,
	Rusted_Kushala_Daora,
	Blango,
	Conga,
	Remobra,
	Lunastra,
	Teostra,
	Hermitaur,
	Shogun_Ceanataur,
	Bulldrome,
	Anteka,
	Popo,
	White_Fatalis,
	Yama_Tsukami_2,
	Ceanataur,
	Hypnocatrice,
	Lavasioth,
	Tigrex,
	Akantor,
	Bright_Hypnoc,
	Lavasioth_Subspecies,
	Espinas,
	Orange_Espinas,
	White_Hypnoc,
	Akura_Vashimu,
	Akura_Jebia,
	Berukyurosu,
	Cactus_01,
	Gorge_Objects,
	Gorge_Rocks,
	Pariapuria,
	White_Espinas,
	Kamu_Orugaron,
	Nono_Orugaron,
	Raviente,
	Dyuragaua,
	Doragyurosu,
	Gurenzeburu,
	Burukku,
	Erupe,
	Rukodiora,
	Unknown,
	Gogomoa,
	Kokomoa,
	Taikun_Zamuza,
	Abiorugu,
	Kuarusepusu,
	Odibatorasu,
	Disufiroa,
	Rebidiora,
	Anorupatisu,
	Hyujikiki,
	Midogaron,
	Giaorugu,
	Mi_Ru,
	Farunokku,
	Pokaradon,
	Shantien,
	Pokara,
	Dummy,
	Goruganosu,
	Aruganosu,
	Baruragaru,
	Zerureusu,
	Gougarf,
	Uruki,
	Forokururu,
	Meraginasu,
	Diorekkusu,
	Garuba_Daora,
	Inagami,
	Varusaburosu,
	Poborubarumu,
	Duremudira,
	UNK_0,
	Felyne,
	Blue_NPC,
	UNK_1,
	Cactus_Varusa,
	Veggie_Elders,
	Gureadomosu,
	Harudomerugu,
	Toridcless,
	Gasurabazura,
	Kusubami,
	Yama_Kurai,
	Dure_2nd_District,
	Zinogre,
	Deviljho,
	Brachydios,
	Berserk_Laviente,
	Toa_Tesukatora,
	Barioth,
	Uragaan,
	Stygian_Zinogre,
	Guanzorumu,
	Starving_Deviljho,
	UNK,
	Egyurasu,
	Voljang,
	Nargacuga,
	Keoaruboru,
	Zenaserisu,
	Gore_Magala,
	Blinking_Nargacuga,
	Shagaru_Magala,
	Amatsu,
	Elzelion,
	Musou_Dure,
	Rocks_1,
	Seregios,
	Bogabadorumu,
	Unknown_Blue_Barrel,
	Musou_Bogabadorumu,
	Costumed_Uruki,
	Musou_Zerureusu,
	PSO2_Rappy,
	King_Shakalaka
} MonsterID;
 

typedef enum <uint32> { 
    Nothing = 0,
    Hunt = 1,
    Capture = 257,
    Slay = 513,
    Damage = 32772,
    Slay_or_Damage = 98308,
    Slay_All = 262144,
    Slay_Total = 131072,
    Deliver = 2,
    Break_Part = 16388,
    Deliver_Flag = 4098,
    Esoteric_Action = 16
} ObjectiveType<format=hex>;

typedef struct {
    ObjectiveType questObj;
    MonsterID monster;
    FSkip(1);
    uint16 quantity; 
} Objective<size=8>;


typedef struct {
    SetBackColor( 0xFFAAFFFF );
    uint16 rate; 
    uint16 item; 
    uint16 qty; 
} rewardItem;

typedef struct {
    SetBackColor( 0xFFFFCCFF );
    uint16 item; 
    uint16 qty; 
} supplyItem;

typedef struct {
    SetBackColor( 0xFFFFCCFF );
    uint16 rate; 
    uint16 item; 
} gatherItem;


typedef struct {
    byte tableId; 
    byte unk0;
    uint16 unk1;
    uint32 tableOffset; 
    FSeek(tableOffset);
    local int i;
    while(i != 65535)
    {
        rewardItem item;
        i = ReadUShort();
    };
} rewardTable;

typedef struct LargeMonsterSpawn {
    MonsterID monster;
    FSkip(3);// adjust for other values being int16s
    uint32 spawnAmount;
    uint32 spawnStage;
    FSkip(16); // null in working example
    uint32 Unk2;
    float xPos;
    float yPos;
    float zPos;
} largeMonsterSpawn<size=60>;


// Minion Spawns
typedef struct MinionSpawn {
    MonsterID monster;
    FSkip(1);// adjust for other values being int16s
    uint16 spawnToggle;
    uint32 spawnAmount;
    uint32 Unk0;
    FSkip(16); // null in working example
    uint32 Unk1;
    float xPos;
    float yPos;
    float zPos;
    FSkip(16);
} MinionSpawn;



LittleEndian(); 
QuestFileHeader header<size=68>;
SetBackColor( 0xFF00FFBB );
struct{
    uint16 questSizeMulti;
    uint16 unk0;
    uint32 statTable1;
    uint32 mainRankPoints;
    uint32 unk1;
    uint32 subARankPoints;
    uint32 subBRankPoints;
    uint32 unk2;
    FSkip(1);
    byte statTable2; // not always stats, 06 on zenith anoru


// Extended Quest Properties

SetBackColor( 0xFFFF5555 );

FSeek(120);
struct
{
    uint16 gatheringTablesQty;
    uint16 unk0;
    byte area1zones;
    byte area2zones;
    byte area3zones;
    byte area4zones;
} quantity;

} genQuestProp;

FSeek(192);
SetBackColor( 0xFFFF0000 );
struct{
    byte Unk0;
    byte Unk1;
    byte questLocaleFlags;
    byte Unk2;
    byte rankingID;
    byte Unk3;
    uint16 Unk4;  
    uint16 RankBand0;
    uint16 Unk5;  
    uint32 questFee;
    uint32 rewardMain;
    uint32 rewardA;
    uint32 rewardB;
FSkip(2);
    uint16 hardHunterRankReq;
    uint32 QuestTime;
    uint32 QuestMap;
    uint32 QuestStringsPtr;
    FSkip(2);
    uint16 QuestID;
    struct QuestObjective{
        SetBackColor( 0xFFAAFFFF );
        Objective objective1;
        SetBackColor( 0xFFFFFF00 );
        Objective objective2;
        SetBackColor( 0xFFBBFF00 );
        Objective objective3;
    } objectives;
    byte unk6;
    byte unk7;
    uint16 JoinRankMin;
    uint16 JoinRankMax;
    uint16 PostRankMin;
    uint16 PostRankMax;
} mainQuestProp;


// Quest Objectives
FSeek(240);
SetBackColor( 0xFF00FF55 );



if(mainQuestProp.objectives.objective1.questObj == Slay_All){
    // Interception Settings
    FSeek(374);
    SetBackColor( 0xFFFF00BB );
    struct Interception{
        byte monsterVariant1;
        byte monsterVariant2;
        byte monsterVariant3;
        MonsterID monster1;
        MonsterID monster2;
        MonsterID monster3;
        MonsterID monster4;
        MonsterID monster5;
    } interceptionFlags;
};

// quest and monster variations
FSeek(336);
SetBackColor( 0xFF2222FF );
struct Variants{
SetBackColor( 0xFF220088 );
    byte monsterVariant0;
    byte monsterVariant1;
    byte monsterVariant2;
    byte mapVariant0;
    uint16 requiredItemType;
    byte requiredItemCount;
    byte questVariant1;
    byte questVariant2;
    byte questVariant3;
    byte questVariant4;

FSeek(388);
    uint32 questClearsAllowed;
    byte questMonsterIcon; // just standard id 

} variants<size=10>;
FSeek(284);
struct ForcedEquipment{
SetBackColor( 0xFF00FF00 );
uint16 legs;
uint16 legsAttach1; // +0x80 for some reason
uint16 legsAttach2; // +0x80 for some reason
uint16 legsAttach3; // +0x80 for some reason
SetBackColor( 0xFF00DD00 );
uint16 weapon;
uint16 weaponAttach1orBitmask;
uint16 weaponAttach2;
uint16 weaponAttach3;
SetBackColor( 0xFF00FF00 );
uint16 head;
uint16 headAttach1; // +0x80 for some reason
uint16 headAttach2; // +0x80 for some reason
uint16 headAttach3; // +0x80 for some reason
SetBackColor( 0xFF00DD00 );
uint16 chest;
uint16 chestAttach1; // +0x80 for some reason
uint16 chestAttach2; // +0x80 for some reason
uint16 chestAttach3; // +0x80 for some reason
SetBackColor( 0xFF00FF00 );
uint16 arms;
uint16 armsAttach1; // +0x80 for some reason
uint16 armsAttach2; // +0x80 for some reason
uint16 armsAttach3; // +0x80 for some reason
SetBackColor( 0xFF00DD00 );
uint16 waist;
uint16 waistAttach1; // +0x80 for some reason
uint16 waistAttach2; // +0x80 for some reason
uint16 waistAttach3; // +0x80 for some reason

SetBackColor( 0xFFAA0000 );
uint32 unk;

FSkip(10); // variant data here for whatever reasons
uint32 allowedEquipmentBitmask; // FF7F for none
}equipment;

struct RewardsFocus{
    FSeek(352);
    SetBackColor( 0xFFDD00DD );
    uint32 unk;
    SetBackColor( 0xFF00DD00 );
    uint16 GRP;

    FSeek(368);   
    uint16 item1;
    uint16 item2;
    uint16 item3;
    FSkip(2);
    uint16 monsterId;
} rewardItemsFocus;

// Large Monsters
FSeek(header.largeMonsterPtr);
SetBackColor( 0xFFFF5555 );
struct LargeMonsterPointers{
    FSkip(8);
    uint32 largeMonsterIds;
    uint32 largeMonsterSpawns;
} lgPtr<size=32>;


FSeek(lgPtr.largeMonsterIds);
struct LargeMonsters{
    local int i;
    for( i = 0; i < 5; i++ )
    {
        FSeek(lgPtr.largeMonsterIds + (i * 4));
        SetBackColor( 0xFF55FFFF );
        MonsterID monster;
        if(monster != 0){
            SetBackColor( 0xFF0000FF );
            FSeek(lgPtr.largeMonsterSpawns + (i * 60));
            LargeMonsterSpawn monster<size=60>;
        }
    };
}largeMonsters;


// Loaded Stages
FSeek(header.loadedStagesPtr);
SetBackColor( cLtBlue );
struct LoadedStages{
    while(FTell() < header.unkPtr7)
    {
        struct{
            uint32 stageID;
            FSkip(12);
        }stage<size=16>;
    }
} stages;


// Quest Areas
typedef struct {
    local int seek;
    local int i = 1;

    SetBackColor( 0xFFFFCCFF );
    uint32 loadedStage; 
    uint32 unk0; 
    uint32 spawnTypes; 
    uint32 spawnStats; 
    seek = FTell();

    FSeek(spawnTypes);
    while(i != 0){
        if(ReadUShort() == 0xFFFF) break;
        SetBackColor( 0xFFAA00FF );
        MonsterID monster;
        FSkip(3);
        i = ReadUShort();
    };
    i = 1;
    FSeek(spawnStats);
    while(i != 0){
        if(ReadUShort() == 0xFFFF) break;
        SetBackColor( 0xFF0000FF );
        MinionSpawn monster<size=60>;
        i = ReadUShort();
    };
    FSeek(seek);
} mapSection;


FSeek(header.questAreaPtr);
struct MapZones{
    local int i = 1;
    local int x = 1;
    local int seek;

    while(i != 0)
    {
        i = ReadUInt();
        if(i == 0) break;
        struct Areas{
            uint32 areaPtr;
            seek = FTell();
            FSeek(areaPtr);
            while(x != 0)
            {
                mapSection area;
                x = ReadUInt();
                if(ReadUInt() == 0)
                {
                    FSkip(4);
                    SetBackColor( 0xFF00FF50 );
                    uint16 unk; // maybe skybox
                    break;
                };
            };
            x = 1;
            FSeek(seek);
        }areas;
    };
} mapZones;

// Quest Supplies
FSeek(header.supplyBoxPtr);
SetBackColor( 0xFF00FFFF );
struct SupplyItems{
    local int i;
    local int count;
    while(i != 65535)
    {
        if(count == 48) break;
        supplyItem item<size=4>;
        i = ReadUShort();
        count++;
    };
} supplies;

FSeek(header.subSupplyBoxPtr);
SetBackColor( 0xFF00DDFF );
struct SubSupplyItems{
    while(FTell() < header.subSupplyBoxPtr + header.subSupplyBoxLen)
    {
        supplyItem item;
    };
} subSupplies;

// Quest Rewards
FSeek(header.rewardPtr);
SetBackColor( 0xFFAAFF22 );
struct RewardSection{
    local int i;
    local int seek;
    while(i != 65535)
    {
        seek = FTell();
        rewardTable rewards;
        FSeek(seek + 8);
        i = ReadUShort();
    };
}rewards;

// Gathering Tables
FSeek(header.gatheringPointers);
SetBackColor( 0xFFAADDFF );
struct{
    local int i;
    local int x = 0;
    i = 1;    
    local int seek;
    while(i != 65535){
    if(ReadUInt() == 0)
        break;
        struct{
            uint32 tablePointer;
            seek = FTell();
            FSeek(tablePointer);
            while(x != 65535)
            {
                gatherItem item;
                x = ReadUShort();
            };
            x = 0;
            FSeek(seek);
   
        }gatherTable;
        if(seek == i){
            break;
        };
        i = ReadUInt();
    };
} gatheringTables;

FSeek(mainQuestProp.QuestStringsPtr);
struct{
    uint32 questTitle;
    uint32 questMain;
    uint32 questA;
    uint32 questB;
    uint32 questClearReqs;
    uint32 questFailReqs;
    uint32 questContractor;
    uint32 questDescription;

    FSeek(questTitle);
    string questTitleString;
    FSeek(questMain);
    string questMainString;
    FSeek(questA);
    string questAString;
    FSeek(questB);
    string questBString;
    FSeek(questClearReqs);
    string questClearReqsString;
    FSeek(questFailReqs);
    string questFailReqsString;
    FSeek(questContractor);
    string questContractorString;
    FSeek(questDescription);
    string questDescriptionString;
}stringPointers;

FSeek(header.areaFloats);
typedef struct {
    if(ReadUInt() == 4294967295) break;
    uint32 stageId;
    while(i != 4294967295){
        float floatVal;
        i = ReadUInt();
    };
} floatSet;

struct perAreaFloats{
    local int i;
    local int seek;
    for(i = 0; i < genQuestProp.quantity.area1zones; i++)
    {
        if(ReadUInt() == 0) break;
        seek = FTell();
        uint32 floatsPtr;
        FSeek(floatsPtr);
        floatSet floats;
        FSeek(seek+4);
    };
} areaFloats;

FSeek(header.unkFloats1);
SetBackColor( 0xFFAA00AA );
struct{
    while(FTell() != header.areaFloats){
            float floatVal;
    }
} unkFloats1;

FSeek(header.unkPtr3);
struct{
    uint32 unkCount;
    uint32 stageID;
} unkPtr3;

FSeek(header.unkPtr9);
struct{
    local int i;
    for(i = 0; i < 6; i++)
    {
        uint32 ptr;
    };
} unkStruct;